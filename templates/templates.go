// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// html/templates/aggregator.html
// html/templates/changePwd.html
// html/templates/createUser.html
// html/templates/home.html
// html/templates/layouts/layout.html
// html/templates/loginForm.html
// html/templates/mailTemplate.tmpl
// html/templates/resetPwd.html
// html/templates/stats.html
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _aggregatorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4d\x6f\xe3\x38\x0c\xbd\xe7\x57\x10\x6a\x50\x3b\x6d\x63\xa7\xbb\x28\xb0\x48\xec\x1c\xb6\xc5\x62\x0f\xd3\x39\x4c\xdb\xd3\x60\x0e\xaa\xcd\xc4\x2a\x6c\x39\x10\xe5\x7e\x20\xf0\x7f\x1f\x48\xb2\x5d\x3b\x75\xa7\x68\x7d\x08\x48\x3e\xbe\x47\x89\x54\x18\x65\x7f\xaf\x27\x00\x00\xfb\xbd\xe2\x72\x8b\x30\x15\x32\xc5\xe7\x33\x98\x26\x19\x97\x12\x73\x58\xc6\x10\x5c\x3a\x9b\xea\x1a\xf6\xfb\x57\xc8\xba\x28\x53\x17\x0e\xae\xb9\x90\x97\x1d\x34\x89\x42\xa3\x1d\x69\x7e\x9f\x23\x88\x34\x66\x05\x12\xf1\x2d\x12\x83\x94\x6b\x3e\x4f\x72\x4e\x84\x14\x33\x97\x61\x7f\xe7\x54\xb4\x86\x56\x62\x87\x69\xe3\xdd\x97\x2a\x45\x95\x23\xb5\xe4\x4a\xe5\x31\x33\x45\xff\xe5\x84\x77\x3f\xbe\x41\x5d\x87\x0f\x54\xca\xf0\xa0\x08\xaf\x74\x39\x57\xb8\x51\x48\x59\xcc\xb4\xaa\x70\x04\x98\x0b\xa9\x51\x3d\xf2\x3c\x66\x17\x63\x30\x89\x1c\xa5\x1e\xd0\x33\xe4\x29\xaa\x39\xe9\x97\x1c\x63\xe6\xbc\x1b\xe3\x30\xd7\xce\x48\x9b\x98\xb3\x9d\xaf\x5e\x9d\x26\xc1\x29\x6d\x04\xe6\x69\xcc\x9a\xc6\xb1\x75\x63\x44\xa1\xce\xfe\xcc\xb8\x15\x45\x7b\x9a\x4d\xa9\x0a\xae\x35\xaa\x98\x69\x51\xe0\x7f\xd6\x45\xc5\xd6\x26\xe7\x63\xa5\x3b\x42\x15\x5c\x09\xda\xe5\xfc\xe5\x3b\x2f\x90\xad\x4d\xe4\x63\xde\xb5\xeb\x35\x5b\x37\xc6\x90\x11\x85\xed\x9d\x4d\xdc\x76\x23\x0a\xed\x38\xd7\x93\x88\x12\x25\x76\x1a\x48\x25\x6f\xc6\x48\x9a\x6b\x91\x84\x0f\x14\xde\x97\xa5\x26\xad\xf8\x6e\x6e\x69\x41\x21\x64\xf0\x40\x6c\x1d\x85\x8e\xfe\x45\x9d\xc1\x70\xdf\x17\x75\x67\x9f\xfa\x69\x99\x54\x05\x4a\x3d\x0b\x14\xf2\xf4\xc5\xdf\x54\x32\xd1\xa2\x94\xfe\x0c\xf6\xdd\x65\xa7\xbe\x77\xd4\x3e\x3d\x6f\x16\x74\x15\x6f\x4d\x41\x7f\xb6\xb2\x89\xf5\x6c\x35\xb1\x46\x78\xd2\x8a\x80\xf9\x2f\xb5\xf3\xf2\x1f\x79\x5e\x61\x5f\x56\xa1\xae\x94\x04\xef\xc8\x83\x53\xb0\xa8\x13\x72\x32\x9d\x48\x45\xa8\x3e\x16\x39\xce\xf5\xaa\xd3\x81\x53\xf0\x8e\xb7\x7a\xe5\x39\xc1\x93\xf0\x40\xb2\xff\x8e\xde\x4a\x3e\x72\x65\x33\x20\x06\x89\x4f\x70\xc5\x35\x36\x49\xab\x2e\x27\x83\xd8\xe6\x04\x5b\xd4\xff\x97\x95\x22\xbf\x07\x16\x3d\xf0\x5a\xc8\x4a\xe3\x00\xa6\x1e\x7c\x83\x49\x29\x53\x0b\x77\xb8\xd8\x80\x9f\x41\x04\xe7\x8b\xfe\xa9\xda\xaa\xde\xc2\x5c\x33\xeb\xe2\xf5\x80\x57\x8c\xf2\x8a\x8e\x57\xbc\xc3\xa3\x51\x1e\x75\x3c\x1a\xe1\x35\xad\xcf\x4c\xb7\x97\x56\xbc\xb3\x68\x74\x92\xbd\x4d\xe2\x27\x65\x5e\x15\x72\x64\x92\xc3\x13\x34\x0b\x63\x79\x10\x36\x5f\x42\x34\x16\x36\xdf\x93\x48\x75\xb6\x04\xef\xfc\x62\xb1\x7b\xf6\xde\xa4\xd4\x83\x48\x7d\x36\x70\xcd\x56\xf9\x62\xb9\x7f\x3e\x5f\xcd\x3b\x5c\x4f\xde\x17\x6b\xff\xb5\xf8\x5c\xf1\xfa\xa7\x9b\x40\x60\xd7\xdd\xaf\x66\x5e\xdd\x9e\xf8\x1d\x00\x00\xff\xff\xe5\x58\xb7\xc1\x3b\x07\x00\x00")

func aggregatorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_aggregatorHtml,
		"aggregator.html",
	)
}

func aggregatorHtml() (*asset, error) {
	bytes, err := aggregatorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aggregator.html", size: 1851, mode: os.FileMode(420), modTime: time.Unix(1606078541, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _changepwdHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x94\xc1\x8e\xd3\x30\x10\x86\xef\x7d\x8a\xc1\x17\x4e\xde\x48\x08\x2e\x28\xf1\x61\x2b\x71\x42\x2b\xb4\x68\x1f\xc0\xb1\x27\xad\xc1\x1e\x47\xf6\x78\xb3\x55\xd5\x77\xe1\x5d\x78\x31\x14\x37\xdd\x0d\x1c\xaa\x3d\xc0\x81\x5b\x6b\xff\xf9\xff\xf9\x46\xfa\xdd\xbe\x91\xf2\x2b\x1a\x76\x91\x3e\xc2\xad\x8f\xe6\x3b\x6c\x23\x31\x12\x4b\xa9\x36\x6d\x3e\x5f\x81\xf1\x3a\xe7\x4e\x84\x5e\x7e\x00\xc6\x27\x96\x06\x89\x31\x09\xb5\x01\x00\x68\x47\xb5\xdd\x6b\xda\x61\x40\x62\xb0\x05\x42\x64\xb0\x08\xa3\xce\x19\xdb\x66\x5c\x54\x43\x4c\x01\x02\xf2\x3e\xda\x4e\x8c\x31\xf3\xf2\x79\xbd\xb4\xee\xf1\x39\xc5\xca\xb3\xd4\xca\x58\xd8\x3b\xc2\x95\xb0\x8a\x1d\x8d\x85\x81\x74\xc0\x4e\x44\x6f\xe7\x9c\x29\x26\x2b\x80\x0f\x23\x76\xe2\xe5\xbf\xb3\x55\xf0\x45\xe7\x2c\x2e\xf6\xb3\xb7\x34\x91\x38\x45\xff\xa7\xb1\xd7\x3d\x7a\xb0\x9a\xb5\xc4\x94\x62\xea\xc4\x94\x22\xed\xc4\xf9\x28\x17\x63\x70\xb6\x48\x6e\xb7\x67\x01\xc3\x2c\x20\x9c\xaa\xbd\xba\xc3\x09\x2e\xc9\x6d\x53\x9d\x56\x7c\x8d\x75\x8f\x7f\x03\x97\x70\xba\x8e\x7b\x99\xe7\x7f\xc7\xbd\xc2\xb6\x8d\x34\xb8\x14\xfe\x31\xe2\x25\x45\x2d\x3f\x5e\x4f\xdb\x17\xe6\x48\x0b\x41\x2e\x7d\x70\xfc\x3c\x6b\xcf\x04\x3d\x93\x1c\x93\x0b\x3a\x1d\x20\xf4\xf2\xbd\x58\xea\xb3\x4a\x38\x5b\x28\x38\x1e\xe1\xc6\xe4\x34\x7c\x72\xe8\x2d\x9c\x4e\xe7\x26\x35\x33\xf1\xd2\xaa\xd5\x6a\xad\x1c\x3c\x3e\xc1\xb7\x92\xd9\x0d\x87\xba\x91\xb9\xc8\x3d\xf2\x84\x48\xa0\xbd\xdb\x91\x74\x8c\x21\x2f\xfd\x9d\xd3\xdf\xad\x36\x76\x3c\x82\x1b\xe0\xe6\x21\x63\xba\xd3\x01\x2f\x79\x35\xa7\xa8\x56\xc3\x3e\xe1\xd0\x89\x79\xa8\x5b\x9d\xf1\xe1\xfe\x33\x9c\x4e\x8d\x50\xf7\xc8\xb1\x24\xf8\xf9\x03\xfc\x5b\x6d\x4c\x41\xe7\xdb\x46\xab\xb6\x29\x95\x00\x7d\x7e\xad\x97\x8f\x3b\x47\x2f\x8e\xba\x40\x3d\xf9\xcd\x8d\x56\x8b\xa8\x8b\x6f\x9b\xe5\x9d\x52\x9b\xab\xef\xd9\xaf\x00\x00\x00\xff\xff\xec\xc2\x85\x45\xed\x04\x00\x00")

func changepwdHtmlBytes() ([]byte, error) {
	return bindataRead(
		_changepwdHtml,
		"changePwd.html",
	)
}

func changepwdHtml() (*asset, error) {
	bytes, err := changepwdHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "changePwd.html", size: 1261, mode: os.FileMode(420), modTime: time.Unix(1606429167, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _createuserHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\x41\x6e\xea\x40\x0c\x86\xf7\x9c\xc2\xf2\xe6\xad\x08\x17\x48\xb2\x79\x52\x77\x74\xd7\x03\x4c\x32\x06\x2c\xcd\x8c\x53\x8f\x07\x15\x21\x0e\xd4\x73\xf4\x62\x15\x49\x68\x81\xaa\xaa\xaa\x2e\xe3\x7c\xff\x6f\x7f\x4a\x6a\xcf\x7b\xe8\x83\xcb\xb9\xc1\x8d\x68\x5c\x76\x62\x26\x11\xdb\x05\x00\x40\x7d\x1e\x81\x4a\xa0\xe9\x2d\x82\xeb\x8d\x25\x35\x88\x10\xc9\x76\xe2\x1b\x1c\x24\x1b\x5e\x2a\x82\x6c\x39\x2d\x47\x74\x6a\x18\x5b\xee\x77\x6c\x55\xca\x70\x05\x8c\x50\x70\x1d\x05\xd8\x88\xce\x50\xc9\xa4\xc9\x45\xc2\xf6\x51\x22\xf8\x7f\xc5\x38\x70\x76\x46\x45\xeb\xd5\x08\xdf\x15\x70\x1a\x8a\xc1\x39\xd2\xe0\x47\x18\x86\xe0\x7a\xda\x49\xf0\xa4\x0d\x3e\xcd\xe3\xaa\xaa\xf0\xe6\xa2\x0b\x0f\xe3\x53\x2f\xc9\x54\x02\x02\xfb\xfb\x63\xc0\x0e\x03\x35\x68\xf4\x62\x08\x4a\xcf\x85\x95\xfc\x95\xea\xca\xf3\xfe\xaf\xe6\x14\x1d\x07\x6c\xd7\x62\xe0\x09\x06\x97\x33\xfd\x6c\x3c\x85\x6e\x75\x69\xed\x38\x7c\x71\x1d\xc9\xef\x44\xe7\x9a\xdf\x59\x76\xc5\x4c\xd2\x1c\xca\xa5\x8b\xfc\xf9\x47\x74\x96\xa0\xb3\xb4\x1c\x94\xa3\xd3\x03\xb6\xff\xf5\xed\x95\x14\xc2\xed\x07\x9d\x2a\x5a\x38\x1e\xa1\xea\xb3\x6e\x1e\x98\x82\x87\xd3\x09\xea\xd5\xf9\xae\x76\x31\xed\x7c\x0f\x00\x00\xff\xff\xf2\x19\xca\xda\xaf\x02\x00\x00")

func createuserHtmlBytes() ([]byte, error) {
	return bindataRead(
		_createuserHtml,
		"createUser.html",
	)
}

func createuserHtml() (*asset, error) {
	bytes, err := createuserHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "createUser.html", size: 687, mode: os.FileMode(420), modTime: time.Unix(1606419623, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xc9\x30\xb6\x0b\x4f\xcd\x49\xce\xcf\x4d\x55\x28\x2e\x2d\x52\xc8\x49\x54\x48\x4f\x2d\x2e\xc9\xcc\xcf\x53\x48\x29\x55\x48\xca\x2f\x51\x08\x29\xcf\x2c\x49\xce\x50\x28\xc8\x2f\x2d\x52\xb0\x52\xa8\xae\x56\xd0\xf3\x4d\xcc\xcc\x73\xce\x48\xcc\xcb\x4b\xcd\x51\xa8\xad\xb5\xd1\xcf\x30\xb6\x03\x04\x00\x00\xff\xff\x48\x14\x98\xc8\x47\x00\x00\x00")

func homeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_homeHtml,
		"home.html",
	)
}

func homeHtml() (*asset, error) {
	bytes, err := homeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.html", size: 71, mode: os.FileMode(420), modTime: time.Unix(1606079860, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xc1\x92\xa3\x36\x10\xbd\xfb\x2b\x7a\xb5\x39\x06\xeb\x9e\x02\x0e\x3b\x93\x4b\x6a\x33\x99\xec\xcc\x1e\x72\x6c\x50\x1b\xe4\x08\x89\x48\x8d\x1d\x97\x8b\x7f\x4f\x09\x30\xc6\x1e\x3b\x35\xc9\xae\x2f\x92\x85\xfa\xf5\x7b\xdd\xaf\xb1\xd3\x0f\x8f\xbf\x3d\xbc\xfe\xf1\xfc\x33\xd4\xdc\x98\x7c\x95\xc6\x05\x0c\xda\x2a\x13\x64\x45\xbe\x5a\xa5\x35\xa1\xca\x57\x00\x00\x29\x6b\x36\x94\xbf\xee\x35\x97\x35\x14\x8e\x21\x81\xe3\x11\xd6\xbf\xa2\xb6\x0f\x35\x5a\x4b\x06\xfa\x3e\x95\xe3\xb5\x31\xe4\x43\x92\xc0\xc3\xcb\x0b\x24\xc9\x74\x60\xb4\xfd\x13\x3c\x99\x4c\x04\x3e\x18\x0a\x35\x11\x0b\xa8\x3d\x6d\x32\x11\xc1\x3e\x61\xa0\xaf\x5f\x3e\x43\xdf\xcb\xc0\xc8\xba\x94\x65\x08\xb2\x70\x8e\x03\x7b\x6c\xd7\x8d\xb6\xeb\x32\x04\xf1\x4d\x70\x1b\x67\x19\xf7\x14\x5c\x43\x09\x1a\xf3\x7d\x40\x67\x8e\x09\x63\x61\xe8\xfb\x80\x96\x5d\x60\xd7\x4c\x38\xe7\x92\x6e\x7f\xef\xc8\x1f\x00\xad\x82\x5f\x5e\xa0\xe8\xac\x32\x04\x7b\x09\xcf\xae\x6d\xc9\xaf\xb7\xe1\x5c\xf0\x50\x7a\xdd\x32\x04\x5f\xde\xcb\xb3\x0d\x72\xfb\x57\xc4\x1b\x28\x6f\x83\xc8\x53\x39\x46\xfd\x17\x88\x73\x8b\x46\x3a\x37\xc0\x52\x39\x9a\x69\x95\x16\x4e\x1d\x26\x70\x8b\x3b\x28\x0d\x86\x90\x09\x8b\xbb\x02\x3d\x8c\x4b\x42\x7f\xb7\x68\x55\x62\xaa\xd3\x81\xd1\x55\xcd\x50\x54\xe3\x66\xaa\xeb\x80\x81\x97\x08\x49\xe1\xd1\xaa\x53\x71\x3f\x8a\x68\xd9\xb2\xfe\xe4\x38\x95\xb8\x88\x2a\x3a\x66\x67\xaf\x42\xd9\x55\x95\x21\x2f\x80\x0f\x2d\x65\x62\xbc\x23\x40\x21\xe3\xf4\x2c\x13\xa5\x33\x06\xdb\x40\xa7\x63\xf4\x15\x71\x26\x3e\x8e\x10\x4f\xb8\x13\x80\x5e\x63\x52\x3a\xcb\xde\x99\x19\xfc\xfc\x64\xd4\x46\x2a\x13\x1b\x34\x11\x68\x38\x35\x58\x44\x7f\xbc\x0e\x69\xa2\x6a\x5d\x21\x6b\x67\x17\x52\xc7\x7e\xb4\x78\x87\x76\xa2\xcb\x78\x3d\x95\xf1\xca\x42\xaa\x1c\x75\x2c\x4e\x94\x9e\xcb\x7e\x92\x73\xaa\xf3\x59\x9e\x56\x4b\xea\x57\x2c\x3a\x73\xc5\x21\x76\x72\xda\xfa\xab\x0e\x9d\x3e\xc7\x23\x78\xb4\x15\xc1\x0f\xde\x75\x4c\x3f\x4e\xeb\x23\x31\x6a\x13\xe0\xa7\x0c\xd6\x4f\xb3\x6c\xe8\xfb\x37\x00\xa9\xd1\x8b\xac\x89\x66\x6a\x44\x7e\xd1\xff\x24\x0e\xda\x62\xb0\x2e\x32\xac\xbf\xc4\x2f\xd0\xf7\x22\x7f\xf3\xe8\x91\x42\x39\xbc\xbf\x30\x4f\xa5\xd1\x37\xc9\x93\x55\xd0\xf7\x71\xa7\x37\xb0\xfe\x1a\xc8\x3f\x61\x43\xef\x24\x0a\xca\xbb\x56\xb9\xfd\x75\x3f\x6f\xda\x78\x90\x31\x47\x4c\xfd\x3d\x5b\x7a\xd1\x9a\xc7\x13\x2a\x78\x67\xee\x59\x76\x4e\x3d\x3a\xad\xc6\xd0\xba\xb6\x6b\x33\xc1\xbe\xa3\x3b\xa6\x8c\x25\x5a\x6a\xbc\x98\x9e\x0b\xe2\x0b\x33\xcd\x8c\x1b\xb2\xdd\xd2\xd7\x86\x54\x71\x78\xc3\xf9\x36\xe0\x65\x35\x66\xc8\xa1\xdb\x53\x09\x24\x76\x5c\xcb\xb2\x8e\x6e\x7a\xde\x2b\x91\x3f\x0c\xdb\x86\x2c\x83\xea\xa0\x71\x0c\x8a\xa0\xc5\x10\xe8\x2e\xef\xbb\xdc\x95\xde\x69\x45\x3e\x0e\x92\xd2\xbb\xff\xcf\xd1\xb8\xca\x75\x2c\xf2\xcf\xc3\x7a\xbf\x7e\xb7\xb3\xdc\x77\xa1\x09\xef\xf5\xdc\xbf\x0d\x47\xa4\xa7\xed\xc0\x4e\xdb\x77\xd8\xfe\x72\xfc\x65\x67\x96\x2f\x98\x59\x41\x2a\x2d\x4e\xdb\xe3\x11\x0e\x9a\xcc\x10\x9b\xca\xf1\x9d\x1f\x7f\x04\xe2\x5f\x8d\x7f\x02\x00\x00\xff\xff\x6e\xe3\xa6\xae\x7a\x08\x00\x00")

func layoutsLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsLayoutHtml,
		"layouts/layout.html",
	)
}

func layoutsLayoutHtml() (*asset, error) {
	bytes, err := layoutsLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/layout.html", size: 2170, mode: os.FileMode(420), modTime: time.Unix(1606429666, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _loginformHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\x4d\x6e\xe3\x30\x0c\x85\xf7\x39\x05\xc1\xcd\xac\x62\x5f\xc0\xf6\x72\x76\x33\x28\x50\xf4\x00\xb2\xc5\x24\x02\x24\x51\xa5\xa8\xb4\x41\x90\xbb\x17\xfe\xc9\x6f\x51\x64\xd1\x25\x9f\xde\x7b\xe4\x07\xa8\xb1\x6e\x0f\x83\x37\x39\xb7\xb8\x61\x09\xeb\x9e\x55\x39\x60\xb7\x02\x00\x68\x46\x09\x84\x3d\xcd\xaf\x08\x66\x50\xc7\xb1\x45\x84\x40\xba\x63\xdb\x62\xe2\xac\x78\xae\xf0\xbc\x75\x71\x3d\x59\xe7\x86\xa9\xe5\x71\xc7\x56\xb8\xa4\x1b\xc3\x64\xf2\xa6\x27\x0f\x1b\x96\xc5\x54\x32\x49\x34\x81\xb0\xfb\xcf\x01\xec\x9f\xa2\xce\xbb\x6c\x94\x8a\x34\xf5\x64\x7e\x28\x70\x31\x15\x85\x31\xd2\xe2\x25\x0c\xc9\x9b\x81\x76\xec\x2d\x49\x8b\x6f\x8b\x5c\x55\x15\xde\x5d\x74\xf6\xc3\x34\x0d\x1c\x55\xd8\x23\x38\xfb\x78\x0c\xe8\x21\x51\x8b\x4a\x9f\x8a\x20\xf4\x5e\x9c\x90\xbd\x41\xad\xad\xdb\xff\x96\x3c\x99\x9c\x3f\x58\x2c\x76\xff\x58\xc1\x12\x8c\x02\x3d\x87\xbe\xe4\xee\xa1\x5f\x16\xf9\x1b\xf4\xd9\xff\x13\xf4\xb5\x6f\x86\xbe\xce\xcf\xc1\xfb\xa2\xca\x71\x09\xe6\xd2\x07\x77\xfd\x24\xbd\x46\xe8\x35\xae\x93\xb8\x60\xe4\x80\xdd\x2b\xc1\xc0\x31\xd2\xa0\x24\x4d\x3d\x47\x3b\x38\x1e\xa1\x1a\xb2\x6c\xfe\x3a\xf2\x16\x4e\x27\x68\xea\xf1\xac\x6e\x35\xef\xfa\x0a\x00\x00\xff\xff\x78\x3b\x71\xf6\xba\x02\x00\x00")

func loginformHtmlBytes() ([]byte, error) {
	return bindataRead(
		_loginformHtml,
		"loginForm.html",
	)
}

func loginformHtml() (*asset, error) {
	bytes, err := loginformHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "loginForm.html", size: 698, mode: os.FileMode(420), modTime: time.Unix(1606428466, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mailtemplateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8e\x41\x4a\x03\x41\x10\x45\xf7\x7d\x8a\xbf\x72\x35\xc4\x13\x88\x32\xc9\x26\xa0\x10\x24\x71\xdf\xf4\x14\x4e\xeb\x4c\x95\x54\x55\xcc\x22\xd4\x81\xe6\x1c\x73\x31\xe9\x60\x76\x9f\xcf\x7f\xbc\xdf\x0b\x7f\xc9\x59\x71\xbd\x62\x73\x32\x52\x44\x74\x29\x7d\x88\x2b\x61\x16\xc7\x40\xf8\xc9\x66\x84\x8c\x75\xf1\x75\x81\xae\x4b\xe5\xea\x35\x4f\xd5\xd6\x65\x93\xd2\xa1\xe1\x13\xa1\x8c\x99\x3f\x49\x3b\xcc\xa4\xa5\x36\xf0\x57\xce\x86\x22\xcc\x54\x9c\x14\xf6\xaf\xe9\xb3\xd1\xe9\xfd\x15\x11\x8f\x4a\x46\x7e\xb8\x0c\xcf\x4d\xbd\xdf\x3d\xdd\x5f\xec\x77\x88\x78\x38\xca\x37\xf1\xad\xbb\x25\x44\xa4\xb4\x15\x1d\x6a\x9e\x68\x26\xf6\x2e\x1d\x2f\xd5\xcb\xd8\x8b\xbf\xb4\xd5\x5b\xae\xbc\x1d\x33\x33\x4d\x88\xf8\x0b\x00\x00\xff\xff\x17\xdb\xfc\xb2\xda\x00\x00\x00")

func mailtemplateTmplBytes() ([]byte, error) {
	return bindataRead(
		_mailtemplateTmpl,
		"mailTemplate.tmpl",
	)
}

func mailtemplateTmpl() (*asset, error) {
	bytes, err := mailtemplateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mailTemplate.tmpl", size: 218, mode: os.FileMode(420), modTime: time.Unix(1606427614, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resetpwdHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xc1\x6e\xd4\x30\x10\x86\xef\xfb\x14\x83\x2f\x9c\xdc\x48\x08\x2e\x28\xc9\xa1\x45\x48\x48\xa8\x42\x85\x3e\x80\x13\x4f\x76\x4d\xed\x71\x64\x8f\x37\x5d\xad\xf2\x2e\xbc\x0b\x2f\x86\x92\x78\xb7\x59\x84\x4a\x25\xc4\xcd\x19\x4f\xbe\x7f\xfe\xf1\xd8\xe5\x2b\x29\xbf\x62\xcb\xc6\xd3\x7b\xb8\xb6\xbe\x7d\x80\x1b\x4f\x8c\xc4\x52\xd6\x9b\x32\x2e\x5b\xd0\x5a\x15\x63\x25\x5c\x23\xdf\x01\xe3\x23\xcb\x16\x89\x31\x88\x7a\x03\x00\x50\xf6\xf5\xcd\x4e\xd1\x16\x1d\x12\x83\x4e\xe0\x3c\x83\x46\xe8\x55\x8c\x58\x16\x7d\xce\xea\x7c\x70\xe0\x90\x77\x5e\x57\xa2\xf7\x91\xf3\xef\xf3\xa6\x36\xfb\xb3\x8a\x96\x4b\xaa\x96\x3e\xb1\x35\x84\xab\xc4\x39\xd9\x50\x9f\x18\x48\x39\xac\xc4\x24\x32\xf8\xa0\x05\xf0\xa1\xbf\xf8\x36\xba\x12\x84\xc3\x17\x15\xa3\x38\xb1\x27\xb0\x6c\x3d\x71\xf0\xf6\x77\xaa\x55\x0d\x5a\xd0\x8a\x95\xc4\x10\x7c\xa8\xc4\x10\x3c\x6d\xc5\x12\x8a\xa9\x6d\x71\x42\x04\xb3\xdd\xb1\x80\x6e\x4a\x38\xe1\xeb\x5b\x1c\xe0\xa4\x5c\x16\x33\x69\x65\xae\xd0\x66\xff\x6f\x5e\x9f\xf1\x76\xe3\xa9\x33\xc1\xfd\x67\x8b\x27\x95\x3a\x2f\x5e\xee\xb6\x49\xcc\x9e\xb2\x83\x98\x1a\x67\xf8\x5c\x6b\xc3\x04\x0d\x93\xec\x83\x71\x2a\x1c\xc0\x35\xf2\xad\xc8\xc3\xb4\x52\x58\x10\x35\x1c\x8f\x70\xd5\xc6\xd0\x7d\x34\x68\x35\x8c\xe3\xe6\x8f\x5d\xda\x19\xad\x91\x44\x9e\x8f\x80\x11\xf9\x2a\x25\xa3\x05\xec\x95\x4d\x58\x89\x09\x73\x1f\x31\x7c\xfa\x00\xe3\xb8\x1e\xc2\xbf\x51\xd8\x3f\x4c\xa1\x15\xe6\xdb\x14\x79\xa2\x94\xc5\xd4\xfd\xbc\x5e\x1d\xb3\x96\x9d\xc5\x47\xf8\x9e\x22\x9b\xee\x30\x9f\xce\x74\xc5\x1a\xe4\x01\x91\x40\x59\xb3\x25\x69\x18\x5d\xcc\x37\x6b\xea\xc4\x9b\x55\x69\xc7\x23\x98\x6e\xa9\xfa\x56\x39\xbc\xf0\x9e\xea\x52\xc1\x2e\x60\xb7\x94\x74\xad\x22\xde\xdf\x7d\x86\x71\x2c\x44\x7d\x87\xec\x53\x80\x9f\x3f\xc0\xbe\x56\x6d\x9b\xd0\xd8\xb2\x50\x75\x59\xa4\xb9\x9b\x68\xe3\x4b\x59\xd6\x6f\x0d\x3d\x11\x55\x82\x39\x72\x41\xa3\xf3\xa1\xe4\x21\x28\x8b\xfc\x82\xd4\x9b\x67\x5f\x9a\x5f\x01\x00\x00\xff\xff\x67\xb8\xed\x0b\x87\x04\x00\x00")

func resetpwdHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resetpwdHtml,
		"resetPwd.html",
	)
}

func resetpwdHtml() (*asset, error) {
	bytes, err := resetpwdHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resetPwd.html", size: 1159, mode: os.FileMode(420), modTime: time.Unix(1606428734, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _statsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xb1\x6a\xc4\x30\x10\x44\xfb\xfb\x8a\xc5\x5c\x99\x58\x5c\x1b\xd6\x6a\x92\x36\xd5\x91\x0f\x58\x5b\x4b\x64\x30\xd2\x65\x77\x5d\x04\xe1\x7f\x0f\x67\x39\x71\x12\x8e\x6b\x84\x66\x79\xcc\x0c\x83\xf1\xe4\xcf\x46\x36\xaa\x8d\x1f\x33\x2b\x5c\xf2\x2c\x50\x0a\xb4\xaf\x34\xa6\xe7\x48\x29\xf1\x04\xcb\x82\x2e\x9e\xfc\x01\x8d\xfa\x89\x61\x98\x48\xb5\x6b\xaa\x58\xdf\xc7\x3e\x4b\x60\xe1\xd0\xf8\x03\x00\x00\x5a\x64\x0a\xf5\x5f\xb5\xec\x62\x03\x40\x87\x7c\xe1\xae\x19\xf2\xd4\xf8\x37\x65\x41\x67\xf1\x3e\x75\x1e\xb2\xf0\x5f\x0c\xdd\xb7\xf5\xf5\xfe\x13\x8a\xd6\xe7\xf0\xb9\x63\xa5\x08\xa5\x77\x86\xe3\xac\x2c\x0f\x70\xd4\xab\x13\x3c\x75\xd0\xbe\x90\x51\xfb\x7b\x82\x65\xb9\x57\x3b\xf8\x52\xaa\xcb\xba\x8a\x85\xdb\x40\xf5\xff\x4f\xec\x65\x6b\x27\x4e\x61\x4b\x43\xb7\x15\x46\xb7\x0e\xea\xbf\x02\x00\x00\xff\xff\xbf\xf4\xba\x07\x99\x01\x00\x00")

func statsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_statsHtml,
		"stats.html",
	)
}

func statsHtml() (*asset, error) {
	bytes, err := statsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stats.html", size: 409, mode: os.FileMode(420), modTime: time.Unix(1605896240, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aggregator.html":     aggregatorHtml,
	"changePwd.html":      changepwdHtml,
	"createUser.html":     createuserHtml,
	"home.html":           homeHtml,
	"layouts/layout.html": layoutsLayoutHtml,
	"loginForm.html":      loginformHtml,
	"mailTemplate.tmpl":   mailtemplateTmpl,
	"resetPwd.html":       resetpwdHtml,
	"stats.html":          statsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aggregator.html": &bintree{aggregatorHtml, map[string]*bintree{}},
	"changePwd.html":  &bintree{changepwdHtml, map[string]*bintree{}},
	"createUser.html": &bintree{createuserHtml, map[string]*bintree{}},
	"home.html":       &bintree{homeHtml, map[string]*bintree{}},
	"layouts": &bintree{nil, map[string]*bintree{
		"layout.html": &bintree{layoutsLayoutHtml, map[string]*bintree{}},
	}},
	"loginForm.html":    &bintree{loginformHtml, map[string]*bintree{}},
	"mailTemplate.tmpl": &bintree{mailtemplateTmpl, map[string]*bintree{}},
	"resetPwd.html":     &bintree{resetpwdHtml, map[string]*bintree{}},
	"stats.html":        &bintree{statsHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
