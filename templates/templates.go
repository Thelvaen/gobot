// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// html/templates/aggregator.html
// html/templates/home.html
// html/templates/layouts/layout.html
// html/templates/login_form.html
// html/templates/stats.html
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"net/http"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}


type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var _aggregatorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xcf\x4f\xe3\x3a\x10\xbe\xf7\xaf\x18\x99\x8a\xa4\x40\x93\xa2\x27\xa4\xa7\x36\xe9\xe1\x81\x9e\xf6\xb0\xec\x61\x81\xd3\x6a\x0f\x26\x99\x36\x46\x89\x53\x79\x1c\x7e\xa8\xca\xff\xbe\xb2\x9d\x84\xa4\x84\x45\x90\x43\x35\x33\xdf\x7c\xdf\xd8\x33\xee\x44\xd9\x3f\xeb\x09\x00\xc0\x7e\xaf\xb8\xdc\x22\x4c\x85\x4c\xf1\xf9\x0c\xa6\x49\xc6\xa5\xc4\x1c\x96\x31\x04\x97\xce\xa6\xba\x86\xfd\xfe\x15\xb2\x2e\xca\xd4\x85\x83\x6b\x2e\xe4\x65\x07\x4d\xa2\xd0\x68\x47\x9a\xdf\xe7\x08\x22\x8d\x59\x81\x44\x7c\x8b\xc4\x20\xe5\x9a\xcf\x93\x9c\x13\x21\xc5\xcc\x65\xd8\xdf\x39\x15\xad\xa1\x95\xd8\x61\xda\x78\xf7\xa5\x4a\x51\xe5\x48\x2d\xb9\x52\x79\xcc\x4c\xd1\xff\x38\xe1\xdd\xcf\xef\x50\xd7\xe1\x03\x95\x32\x3c\x28\xc2\x2b\x5d\xce\x15\x6e\x14\x52\x16\x33\xad\x2a\x1c\x01\xe6\x42\x6a\x54\x8f\x3c\x8f\xd9\xc5\x18\x4c\x22\x47\xa9\x07\xf4\x0c\x79\x8a\x6a\x4e\xfa\x25\xc7\x98\x39\xef\xc6\x38\xcc\xb5\x33\xd2\x26\xe6\x6c\xe7\xab\x57\xa7\x49\x70\x4a\x1b\x81\x79\x1a\xb3\xa6\x71\x6c\xdd\x18\x51\xa8\xb3\xbf\x33\x6e\x45\xd1\x9e\x66\x53\xaa\x82\x6b\x8d\x2a\x66\x5a\x14\xf8\xbf\x75\x51\xb1\xb5\xc9\xf9\x58\xe9\x8e\x50\x05\x57\x82\x76\x39\x7f\xf9\xc1\x0b\x64\x6b\x13\xf9\x98\x77\xed\x7a\xcd\xd6\x8d\x31\x64\x44\x61\x7b\x67\x13\xb7\xdd\x88\x42\x3b\xce\xf5\x24\xa2\x44\x89\x9d\x06\x52\xc9\x9b\x31\x92\xe6\x5a\x24\xe1\x03\x85\xf7\x65\xa9\x49\x2b\xbe\x9b\x5b\x5a\x50\x08\x19\x3c\x10\x5b\x47\xa1\xa3\x7f\x51\x67\x30\xdc\xf7\x45\xdd\xd9\xa7\x7e\x5a\x26\x55\x81\x52\xcf\x02\x85\x3c\x7d\xf1\x37\x95\x4c\xb4\x28\xa5\x3f\x83\x7d\x77\xd9\xa9\xef\x1d\xb5\x4f\xcf\x9b\x05\x5d\xc5\x5b\x53\xd0\x9f\xad\x6c\x62\x3d\x5b\x4d\xac\x11\x9e\xb4\x22\x60\xfe\x4b\xed\xbc\xfc\x47\x9e\x57\xd8\x97\x55\xa8\x2b\x25\xc1\x3b\xf2\xe0\x14\x2c\xea\x84\x9c\x4c\x27\x52\x11\xaa\x8f\x45\x8e\x73\xbd\xea\x74\xe0\x14\xbc\xe3\xad\x5e\x79\x4e\xf0\x24\x3c\x90\xec\xbf\xa3\xb7\x92\x8f\x5c\xd9\x0c\x88\x41\xe2\x13\x5c\x71\x8d\x4d\xd2\xaa\xcb\xc9\x20\xb6\x39\xc1\x16\xf5\xb7\xb2\x52\xe4\xf7\xc0\xa2\x07\x5e\x0b\x59\x69\x1c\xc0\xd4\x83\x6f\x30\x29\x65\x6a\xe1\x0e\x17\x1b\xf0\x33\x88\xe0\x7c\xd1\x3f\x55\x5b\xd5\x5b\x98\x6b\x66\x5d\xbc\x1e\xf0\x8a\x51\x5e\xd1\xf1\x8a\x77\x78\x34\xca\xa3\x8e\x47\x23\xbc\xa6\xf5\x99\xe9\xf6\xd2\x8a\x77\x16\x8d\x4e\xb2\xb7\x49\xfc\xa4\xcc\xab\x42\x8e\x4c\x72\x78\x82\x66\x61\x2c\x0f\xc2\xe6\x4b\x88\xc6\xc2\xe6\x7b\x12\xa9\xce\x96\xe0\x9d\x2f\x16\xbb\x67\xef\x4d\x4a\x3d\x88\xd4\x67\x03\xd7\x6c\x95\x2f\x96\xfb\xf7\xf3\xd5\xbc\xc3\xf5\xe4\x7d\xf5\xaa\x17\x9f\x2b\x5e\xff\x72\x13\x08\xec\xba\xfb\xdd\xcc\xab\xdb\x13\x7f\x02\x00\x00\xff\xff\x99\xf7\x8a\x42\x3b\x07\x00\x00")

func aggregatorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_aggregatorHtml,
		"aggregator.html",
	)
}

func aggregatorHtml() (*asset, error) {
	bytes, err := aggregatorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "aggregator.html", size: 1851, mode: os.FileMode(420), modTime: time.Unix(1606065830, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xc9\x30\xb4\x0b\x4f\xcd\x49\xce\xcf\x4d\x55\x28\x2e\x2d\x52\xc8\x49\x54\x48\x4f\x2d\x2e\xc9\xcc\xcf\x53\x48\x29\x55\x48\xca\x2f\x51\x08\x29\xcf\x2c\x49\xce\x50\x28\xc8\x2f\x2d\x52\xb0\x52\xa8\xae\x56\xd0\xf3\x4d\xcc\xcc\x73\xce\x48\xcc\xcb\x4b\xcd\x51\xa8\xad\xb5\xd1\xcf\x30\xb4\x03\x04\x00\x00\xff\xff\x73\x88\xd5\x8b\x47\x00\x00\x00")

func homeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_homeHtml,
		"home.html",
	)
}

func homeHtml() (*asset, error) {
	bytes, err := homeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.html", size: 71, mode: os.FileMode(420), modTime: time.Unix(1605896240, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _layoutsLayoutHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xc1\x72\xdb\x20\x10\x86\xef\x7e\x8a\x0d\xe9\xb1\x98\x7b\x07\xe9\x90\xa4\x3d\x74\xda\x34\x4d\xd2\x43\x8f\x2b\x69\x23\xe3\x62\x50\x61\xe5\xd4\xe3\xd1\xbb\x77\x30\xb2\xad\x38\xc9\xa1\xd3\xf8\x02\x5e\xe0\xe3\xff\x97\x5d\xe9\xb3\xab\x6f\x97\xf7\x3f\x6f\x3e\xc2\x82\x57\xb6\x9c\xe9\x34\x80\x45\xd7\x16\x82\x9c\x28\x67\x33\xbd\x20\x6c\xca\x19\x00\x80\x66\xc3\x96\xca\xfb\x47\xc3\xf5\x02\x2a\xcf\x20\x61\xbb\x85\xf9\x57\x34\xee\x72\x81\xce\x91\x85\x61\xd0\x2a\x6f\xcb\x47\xce\xa4\x84\xcb\xbb\x3b\x90\x72\x0c\x58\xe3\x7e\x41\x20\x5b\x88\xc8\x1b\x4b\x71\x41\xc4\x02\x16\x81\x1e\x0a\x91\x60\x17\x18\xe9\xc7\xed\x17\x18\x06\x15\x19\xd9\xd4\xaa\x8e\x51\x55\xde\x73\xe4\x80\xdd\x7c\x65\xdc\xbc\x8e\x51\xfc\x17\xee\xc1\x3b\xc6\x47\x8a\x7e\x45\x12\xad\x7d\x1b\xe8\x41\xa3\x64\xac\x2c\xbd\x0d\xb4\xee\x23\xfb\xd5\xc8\x39\xa6\x74\xf9\xbd\xa7\xb0\x01\x74\x0d\x7c\xbe\x83\xaa\x77\x8d\x25\x78\x54\x70\xe3\xbb\x8e\xc2\x7c\x19\x8f\x09\x8f\x75\x30\x1d\x43\x0c\xf5\x6b\xf7\x2c\xa3\x5a\xfe\x4e\xbc\x9d\xe4\x65\x14\xa5\x56\xf9\xd4\xbf\x20\x8e\x4f\x94\xe5\xbc\x00\xd3\x2a\x17\xd3\x4c\x57\xbe\xd9\x8c\x70\x87\x6b\xa8\x2d\xc6\x58\x08\x87\xeb\x0a\x03\xe4\x41\xd2\x9f\x0e\x5d\x23\x6d\xbb\x0f\x58\xd3\x2e\x18\xaa\x36\x4f\xc6\xbc\xee\x18\xf8\x94\x20\xab\x80\xae\xd9\x27\xf7\x5c\x94\x9f\xbc\xab\xd9\x78\x17\xa1\xe9\xe1\xc2\xb3\x56\x38\x39\x5d\xf5\xcc\xde\x9d\x20\xd8\xb7\xad\xa5\x20\x80\x37\x1d\x15\x22\xef\x11\xd0\x20\xe3\xb8\x56\x88\xda\x5b\x8b\x5d\xa4\x7d\x18\x43\x4b\x5c\x88\xf3\x8c\xb8\xc6\xb5\x00\x0c\x06\x65\xed\x1d\x07\x6f\x0f\xf0\xe3\x4a\xf6\x48\x4d\x21\x1e\xd0\x26\xd0\x2e\x6a\xb1\x4a\x75\x72\xbf\xbb\x26\xb9\x37\x2d\x26\xf9\x13\xcb\xf9\x5d\x3a\x7c\x45\xb6\x34\x75\xda\xae\x55\xda\x32\xb1\xaa\xb2\x8f\x49\xa4\x31\x87\xf4\xef\xed\xec\xf3\x7d\xb4\x67\x9a\xa9\xf4\x13\x15\xbd\x3d\xd1\x90\x5e\x74\x9c\x86\x93\x97\xda\xff\xb6\x5b\x08\xe8\x5a\x82\x77\xc1\xf7\x4c\xef\xc7\xf1\x8a\x18\x8d\x8d\xf0\xa1\x80\xf9\xf5\xc1\x36\x0c\xc3\x33\x80\xb6\x66\x72\xab\x34\x4c\x2b\x51\x3e\xa9\x03\x99\x1a\x6e\xd2\x60\x4f\x6e\x98\xdf\xa6\x3f\x30\x0c\xa2\x7c\xb6\x74\x45\xb1\xde\x7d\xc7\xb0\xd4\xca\x9a\x17\xc5\x93\x6b\x4e\x55\x69\xd5\xdb\x69\xa6\x1b\xb3\x1e\x2b\x5c\x39\x1c\xa7\xdb\x2d\x6c\x0c\xd9\xdd\x59\xad\x72\x13\xa4\xae\x48\xdf\xde\xbf\x01\x00\x00\xff\xff\x2f\xa0\xdf\x4b\x8b\x05\x00\x00")

func layoutsLayoutHtmlBytes() ([]byte, error) {
	return bindataRead(
		_layoutsLayoutHtml,
		"layouts/layout.html",
	)
}

func layoutsLayoutHtml() (*asset, error) {
	bytes, err := layoutsLayoutHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layouts/layout.html", size: 1419, mode: os.FileMode(420), modTime: time.Unix(1606063323, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _login_formHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\x4d\x6e\xe3\x30\x0c\x85\xf7\x39\x05\xc1\xcd\xac\x62\x5f\xc0\xf6\x66\x80\xd9\xcd\x60\xd0\xb4\x07\x90\x2d\x26\x11\x2a\x8b\x2e\x45\xa5\x0d\x82\xdc\xbd\xb0\xe5\xfc\x16\x45\x16\x5d\xf2\xe9\xbd\x27\x7e\x00\x2b\xeb\x76\xd0\x79\x13\x63\x8d\x6b\x96\x7e\xd9\xb2\x2a\xf7\xd8\x2c\x00\x00\xaa\x51\x02\x61\x4f\xf9\x15\xc1\x74\xea\x38\xd4\x88\xd0\x93\x6e\xd9\xd6\x38\x70\x54\x3c\x55\x78\xde\xb8\xb0\x9c\xac\xb9\x61\x6a\xb9\xff\x63\x23\x9c\x86\x2b\xc3\x64\xf2\xa6\x25\x0f\x6b\x96\xd9\x94\x22\x49\x30\x3d\x61\xf3\x8f\x7b\xb0\xbf\x92\x3a\xef\xa2\x51\x4a\x52\x95\x93\xf9\xae\xc0\x85\x21\x29\x8c\x91\x1a\xcf\x61\x18\xbc\xe9\x68\xcb\xde\x92\xd4\xf8\x32\xcb\x45\x51\xe0\xcd\x46\x27\x3f\x4c\x53\xc7\x41\x85\x3d\x82\xb3\xf7\xcb\x80\xee\x07\xaa\x51\xe9\x43\x11\x84\xde\x92\x13\xb2\x57\xa8\xa5\x75\xbb\x9f\x92\x0f\x26\xc6\x77\x16\x8b\xcd\x5f\x56\xb0\x04\xa3\x40\x8f\xa1\xcf\xb9\x5b\xe8\xff\xb3\xfc\x05\xfa\xe4\xff\x0e\xfa\xd2\x97\xa1\x2f\xf3\x63\xf0\x36\xa9\x72\x98\x83\x31\xb5\xbd\xbb\x1c\x49\xab\x01\x5a\x0d\xcb\x41\x5c\x6f\x64\x8f\xcd\x8a\xa0\xe3\x10\xa8\x53\x92\xaa\xcc\xd1\xab\xae\xcc\x98\xab\xb6\xce\x5a\x0a\x38\x13\x77\x51\xd6\x85\xf2\xeb\xa8\xec\x8c\x4f\x54\xe3\xe1\x00\xc5\xef\xd5\xd3\x9f\xe7\x51\x85\xe3\x11\xa1\x9c\x6f\xb9\x1c\xa1\x9a\x45\xde\xf4\x33\x00\x00\xff\xff\x3e\xd6\x11\x49\xf8\x02\x00\x00")

func login_formHtmlBytes() ([]byte, error) {
	return bindataRead(
		_login_formHtml,
		"login_form.html",
	)
}

func login_formHtml() (*asset, error) {
	bytes, err := login_formHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "login_form.html", size: 760, mode: os.FileMode(420), modTime: time.Unix(1605896240, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _statsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xb1\x6a\xc4\x30\x10\x44\xfb\xfb\x8a\xc5\x5c\x99\x58\x5c\x1b\xd6\x6a\x92\x36\xd5\x91\x0f\x58\x5b\x4b\x64\x30\xd2\x65\x77\x5d\x04\xe1\x7f\x0f\x67\x39\x71\x12\x8e\x6b\x84\x66\x79\xcc\x0c\x83\xf1\xe4\xcf\x46\x36\xaa\x8d\x1f\x33\x2b\x5c\xf2\x2c\x50\x0a\xb4\xaf\x34\xa6\xe7\x48\x29\xf1\x04\xcb\x82\x2e\x9e\xfc\x01\x8d\xfa\x89\x61\x98\x48\xb5\x6b\xaa\x58\xdf\xc7\x3e\x4b\x60\xe1\xd0\xf8\x03\x00\x00\x5a\x64\x0a\xf5\x5f\xb5\xec\x62\x03\x40\x87\x7c\xe1\xae\x19\xf2\xd4\xf8\x37\x65\x41\x67\xf1\x3e\x75\x1e\xb2\xf0\x5f\x0c\xdd\xb7\xf5\xf5\xfe\x13\x8a\xd6\xe7\xf0\xb9\x63\xa5\x08\xa5\x77\x86\xe3\xac\x2c\x0f\x70\xd4\xab\x13\x3c\x75\xd0\xbe\x90\x51\xfb\x7b\x82\x65\xb9\x57\x3b\xf8\x52\xaa\xcb\xba\x8a\x85\xdb\x40\xf5\xff\x4f\xec\x65\x6b\x27\x4e\x61\x4b\x43\xb7\x15\x46\xb7\x0e\xea\xbf\x02\x00\x00\xff\xff\xbf\xf4\xba\x07\x99\x01\x00\x00")

func statsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_statsHtml,
		"stats.html",
	)
}

func statsHtml() (*asset, error) {
	bytes, err := statsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stats.html", size: 409, mode: os.FileMode(420), modTime: time.Unix(1605896240, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"aggregator.html":     aggregatorHtml,
	"home.html":           homeHtml,
	"layouts/layout.html": layoutsLayoutHtml,
	"login_form.html":     login_formHtml,
	"stats.html":          statsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"aggregator.html": &bintree{aggregatorHtml, map[string]*bintree{}},
	"home.html":       &bintree{homeHtml, map[string]*bintree{}},
	"layouts": &bintree{nil, map[string]*bintree{
		"layout.html": &bintree{layoutsLayoutHtml, map[string]*bintree{}},
	}},
	"login_form.html": &bintree{login_formHtml, map[string]*bintree{}},
	"stats.html":      &bintree{statsHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
